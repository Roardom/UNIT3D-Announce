// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use diesel::prelude::*;

use chrono::NaiveDateTime;
#[derive(Queryable, Debug)]
pub struct Announce {
    pub id: u64,
    pub user_id: u32,
    pub torrent_id: u32,
    pub uploaded: u64,
    pub downloaded: u64,
    pub left: u64,
    pub corrupt: u64,
    pub peer_id: Vec<u8>,
    pub port: u16,
    pub numwant: u16,
    pub created_at: NaiveDateTime,
    pub event: String,
    pub key: String,
}

#[derive(Queryable, Debug)]
pub struct BlacklistClient {
    pub id: u64,
    pub name: String,
    pub reason: Option<String>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub peer_id_prefix: String,
}

#[derive(Queryable, Debug)]
pub struct FeaturedTorrent {
    pub id: u32,
    pub user_id: u32,
    pub torrent_id: u32,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug)]
pub struct FreeleechToken {
    pub id: u32,
    pub user_id: u32,
    pub torrent_id: u32,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug)]
pub struct Group {
    pub id: i32,
    pub name: String,
    pub slug: String,
    pub position: i32,
    pub level: i32,
    pub download_slots: Option<i32>,
    pub color: String,
    pub icon: String,
    pub effect: String,
    pub is_internal: bool,
    pub is_editor: bool,
    pub is_owner: bool,
    pub is_admin: bool,
    pub is_modo: bool,
    pub is_trusted: bool,
    pub is_immune: bool,
    pub is_freeleech: bool,
    pub is_double_upload: bool,
    pub is_refundable: bool,
    pub can_upload: bool,
    pub is_incognito: bool,
    pub autogroup: bool,
    pub min_uploaded: Option<u64>,
    pub min_seedsize: Option<u64>,
    pub min_avg_seedtime: Option<u64>,
    pub min_ratio: Option<f64>,
    pub min_age: Option<u64>,
    pub system_required: bool,
}

#[derive(Queryable, Debug)]
pub struct History {
    pub id: u64,
    pub user_id: u32,
    pub torrent_id: u32,
    pub agent: String,
    pub uploaded: u64,
    pub actual_uploaded: u64,
    pub client_uploaded: u64,
    pub downloaded: u64,
    pub refunded_download: u64,
    pub actual_downloaded: u64,
    pub client_downloaded: u64,
    pub seeder: bool,
    pub active: bool,
    pub seedtime: u64,
    pub immune: bool,
    pub hitrun: bool,
    pub prewarn: bool,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub completed_at: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug)]
pub struct Peer {
    pub id: u64,
    pub peer_id: Vec<u8>,
    pub ip: Vec<u8>,
    pub port: u16,
    pub agent: String,
    pub uploaded: u64,
    pub downloaded: u64,
    pub left: u64,
    pub seeder: bool,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub torrent_id: u32,
    pub user_id: u32,
    pub connectable: bool,
    pub active: bool,
    pub visible: bool,
}

#[derive(Queryable, Debug)]
pub struct PersonalFreeleeche {
    pub id: u32,
    pub user_id: u32,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Queryable, Debug)]
pub struct Torrent {
    pub id: u32,
    pub name: String,
    pub description: String,
    pub mediainfo: Option<String>,
    pub bdinfo: Option<String>,
    pub file_name: String,
    pub num_file: i32,
    pub folder: Option<String>,
    pub size: f64,
    pub nfo: Option<Vec<u8>>,
    pub leechers: i32,
    pub seeders: i32,
    pub times_completed: i32,
    pub category_id: Option<i32>,
    pub user_id: u32,
    pub imdb: u32,
    pub tvdb: u32,
    pub tmdb: u32,
    pub mal: u32,
    pub igdb: String,
    pub season_number: Option<i32>,
    pub episode_number: Option<i32>,
    pub stream: bool,
    pub free: i16,
    pub doubleup: bool,
    pub refundable: bool,
    pub highspeed: bool,
    pub featured: bool,
    pub status: i16,
    pub moderated_at: Option<NaiveDateTime>,
    pub moderated_by: Option<i32>,
    pub anon: i16,
    pub sticky: i16,
    pub sd: bool,
    pub internal: bool,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub bumped_at: Option<NaiveDateTime>,
    pub fl_until: Option<NaiveDateTime>,
    pub du_until: Option<NaiveDateTime>,
    pub release_year: Option<u16>,
    pub type_id: i32,
    pub resolution_id: Option<i32>,
    pub distributor_id: Option<i32>,
    pub region_id: Option<i32>,
    pub personal_release: i32,
    pub balance: Option<i64>,
    pub balance_offset: Option<i64>,
    pub info_hash: Vec<u8>,
}

#[derive(Queryable, Debug)]
pub struct User {
    pub id: u32,
    pub username: String,
    pub email: String,
    pub password: String,
    pub two_factor_secret: Option<String>,
    pub two_factor_recovery_codes: Option<String>,
    pub two_factor_confirmed_at: Option<NaiveDateTime>,
    pub passkey: String,
    pub group_id: i32,
    pub internal_id: Option<i32>,
    pub active: bool,
    pub uploaded: u64,
    pub downloaded: u64,
    pub image: Option<String>,
    pub title: Option<String>,
    pub about: Option<String>,
    pub signature: Option<String>,
    pub fl_tokens: u32,
    pub seedbonus: f64,
    pub invites: u32,
    pub hitandruns: u32,
    pub rsskey: String,
    pub chatroom_id: u32,
    pub censor: bool,
    pub chat_hidden: bool,
    pub hidden: bool,
    pub style: bool,
    pub torrent_layout: bool,
    pub torrent_filters: bool,
    pub custom_css: Option<String>,
    pub standalone_css: Option<String>,
    pub read_rules: bool,
    pub can_chat: bool,
    pub can_comment: bool,
    pub can_download: bool,
    pub can_request: bool,
    pub can_invite: bool,
    pub can_upload: bool,
    pub show_poster: bool,
    pub peer_hidden: bool,
    pub private_profile: bool,
    pub block_notifications: bool,
    pub stat_hidden: bool,
    pub remember_token: Option<String>,
    pub api_token: Option<String>,
    pub last_login: Option<NaiveDateTime>,
    pub last_action: Option<NaiveDateTime>,
    pub disabled_at: Option<NaiveDateTime>,
    pub deleted_by: Option<u32>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub locale: String,
    pub chat_status_id: u32,
    pub deleted_at: Option<NaiveDateTime>,
    pub own_flushes: i8,
    pub email_verified_at: Option<NaiveDateTime>,
}
